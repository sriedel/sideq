#!/usr/bin/env ruby

require 'optparse'
require 'sidekiq'
require 'sidekiq/api'

require_relative '../lib/sideq'

RACK_ENV = ENV['RACK_ENV'] || "development"

class Parser
  def self.parse(arguments)
    options = { "host" => "localhost",
                "port" => 6379,
                "db"   => 0 }

    opt_parser = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options] command [subcommand]\n" <<
                    "\n" <<
                    "Commands and subcommands:\n" <<
                    "stats                        Print sidekiq statistics\n" <<
                    "queues list                  List all known queues\n" <<
                    "queue list name              List contents of named queue\n" <<
                    "queue show name jid [jid...] Show details of jobs in named queue\n" <<
                    "queue del name jid [jid...]  Delete jobs from the named queue\n" <<
                    "queue clear name             Clear all jobs from the named queue\n" <<
                    "retry list                   List contents of the retry set\n" <<
                    "retry list csv               List contents of the retry set as CSV\n" <<
                    "retry show jid [jid ...]     Show details of entrie sin the retry set\n" <<
                    "retry del jid [jid ...]      Delete entries from the retry set\n" <<
                    "retry kill jid [jid ...]     Move jobs from the retry set to the dead set\n" <<
                    "retry now jid [jid ...]      Retry jobs in the retry set right now\n" <<
                    "retry clear                  Clears all entries in the retry set\n" <<
                    "dead list                    List contents of the dead set\n" <<
                    "dead list csv                List contents of the dead set as CSV\n" <<
                    "dead show jid [jid...]       Show details of entries in the dead set\n" <<
                    "dead del jid [jid...]        Delete jobs from the dead set\n" <<
                    "dead now jid [jid...]        Retry jobs from the dead set right now\n" <<
                    "dead clear                   Clears all entries of the dead set\n" <<
                    "processes list               Lists all processes known to sidekiq\n" <<
                    "processes quiet              Send the quiet signal to all sidekiq processes\n" <<
                    "processes kill               Send the kill signal to all sidekiq processes\n" <<
                    "processes clean              Clear dead process entries from the process list\n" <<
                    "workers list                 List all workers\n"
      opts.separator "\nOptions:\n"

      opts.on("-n redisdb", "--database=redisdb", "Number of the redis database") do |n|
        options["db"] = n.to_i
      end

      opts.on("-h hostname", "--host=hostname", "Hostname of the redis instance") do |n|
        options["host"] = n
      end

      opts.on("-p port", "--port=port", "Portnumber of the redis instance" ) do |n|
        options["port"] = n.to_i
      end

      opts.on( "-u redis_url", "--url", "URL to connect to (redis://host:port/db)" ) do |n|
        options["url"] = n
      end

      opts.on("--help", "Prints this help") do
        puts opts
        exit
      end
    end

    opt_parser.parse!(arguments)
    return options
  end
end


options = Parser.parse( ARGV )

Sidekiq.configure_client do |config|
  url = options["url"] ||"redis://#{options["host"]}:#{options["port"]}/#{options["db"]}"
  config.redis = { :url  => url, :size => 1 }
end

object = ARGV.shift
case object
  when "stats" then puts Sideq::Stats.new

  when "queues" 
    case ARGV.shift
      when "list"  then puts Sideq::Queue.overview
      else Parser.parse( %w[ --help ] )
    end

  when "queue"
    command = ARGV.shift
    queue_name = ARGV.shift
    queue = Sideq::Queue.new( queue_name )

    case command
      when "list"  then puts queue
      when "show"  then puts queue.details( ARGV )
      when "del"   then queue.delete_entries( ARGV )
      when "clear" then queue.clear
      else Parser.parse( %w[ --help ] )
    end

  when "retry" 
    retries = Sideq::Retries.new

    case ARGV.shift
      when "list"
        case ARGV.shift 
          when "csv" then puts retries.to_csv
          else puts retries
        end

      when "show"  then puts retries.details( ARGV )
      when "del"   then retries.delete_entries( ARGV )
      when "kill"  then retries.kill_entries( ARGV )
      when "now"   then retries.retry_entries( ARGV )
      when "clear" then retries.clear
      else Parser.parse( %w[ --help ] )
    end

  when "dead"
    dead = Sideq::Dead.new

    case ARGV.shift
      when "list" 
        case ARGV.shift
          when "csv" then puts dead.to_csv
          else puts dead
        end

      when "show"  then puts dead.details( ARGV )
      when "del"   then dead.delete_entries( ARGV )
      when "now"   then dead.retry_entries( ARGV )
      when "clear" then dead.clear
      else Parser.parse( %w[ --help ] )
    end

  when "processes"
    processes = Sideq::Processes.new

    case ARGV.shift
      when "list"  then puts processes
      when "quiet" then processes.quiet
      when "kill"  then processes.kill
      when "clean" then processes.clean
      else Parser.parse( %w[ --help ] )
    end

  when "workers"
    workers = Sideq::Workers.new
    case ARGV.shift
      when "list" then puts workers
      else Parser.parse( %w[ --help ] )
    end

  else Parser.parse( %w[ --help ] )
end
